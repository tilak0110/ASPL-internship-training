server:
  port: 8081
  ssl:
    enabled: false # Enable later for mTLS

spring:
  application:
    name: order-service

  datasource:
    url: jdbc:h2:mem:ordersdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driverClassName: org.h2.Driver
    username: sa
    password: ''

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect

  h2:
    console:
      enabled: true
      path: /h2-console

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: order-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.example.common_events.dto,com.fasterxml.jackson.databind.node"
        spring.json.value.default.type: com.example.common_events.dto.BaseEvent
        spring.json.type.mapping: |
          OrderEvent:com.example.common_events.dto.OrderEvent,
          InventoryEvent:com.example.common_events.dto.InventoryEvent,
          PaymentEvent:com.example.common_events.dto.PaymentEvent
        spring.json.use.type.headers: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: |
          OrderEvent:com.example.common_events.dto.OrderEvent,
          InventoryEvent:com.example.common_events.dto.InventoryEvent,
          PaymentEvent:com.example.common_events.dto.PaymentEvent

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

outbox:
  publisher:
    delay: 15000
