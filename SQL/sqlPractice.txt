-- MySQL & PostgreSQL Comprehensive Practice Queries

-- Creating a Database
drop database if exists tilak_db;
create database tilak_db;

-- Switch Database (PostgreSQL only)
-- \c tilak_db;

-- Creating Tables
create table users (
    id serial primary key,
    name varchar(100),
    email varchar(100) unique,
    age int,
    salary decimal(10,2)
);

create table teams (
    id serial primary key,
    name varchar(100) unique
);

create table gadgets (
    id serial primary key,
    name varchar(100),
    price decimal(10,2),
    category varchar(50)
);

-- Inserting Data

insert into users (name, email, age, salary) values
('Tilak', 'tilak@example.com', 25, 70000.00),
('Raj', 'raj@example.com', 27, 65000.00),
('Sahu', 'sahu@example.com', 30, 80000.00),
('Vikas', 'vikas@example.com', 32, 90000.00),
('Amit', 'amit@example.com', 28, 75000.00),
('Rohit', 'rohit@example.com', 26, 72000.00),
('Deepak', 'deepak@example.com', 29, 77000.00),
('Karan', 'karan@example.com', 31, 82000.00),
('Ankit', 'ankit@example.com', 24, 68000.00),
('Manoj', 'manoj@example.com', 35, 95000.00);

insert into teams (name) values 
('Development'), ('Marketing'), ('Support'), ('HR'), ('Finance'), ('Sales'), ('Operations'), ('Legal'), ('IT'), ('Customer Service');

insert into gadgets (name, price, category) values
('MacBook', 1500.00, 'Electronics'),
('Chair', 200.00, 'Furniture'),
('Smartwatch', 300.00, 'Wearable'),
('iPhone', 1200.00, 'Electronics'),
('Desk', 400.00, 'Furniture'),
('Monitor', 500.00, 'Electronics'),
('Headphones', 150.00, 'Audio'),
('Mouse', 50.00, 'Accessories'),
('Keyboard', 100.00, 'Accessories'),
('Tablet', 800.00, 'Electronics');

-- Selecting Data

select * from users;

select name, salary from users where age > 25;

select * from users order by salary desc limit 3;

select count(*) from users;

select avg(salary) from users;

select name from users where name like 'T%';

select * from gadgets where price between 200 and 1500;

select distinct category from gadgets;

select * from users where email like '%example.com%';

select * from users where age in (25, 28, 30, 35);

-- Updating and Deleting Data

update users set salary = 75000 where name = 'Raj';

update users set age = age + 1 where name = 'Tilak';

update gadgets set price = price * 1.1 where category = 'Electronics';

delete from users where name = 'Sahu';

delete from gadgets where category = 'Furniture';

update users set salary = salary + 5000 where age > 30;

update teams set name = 'Tech Team' where name = 'Development';

delete from users where age < 26;

delete from teams where name = 'Customer Service';

update gadgets set price = price - 50 where category = 'Accessories';

-- Joins and Set Operations

alter table users add column team_id int;

update users set team_id = 1 where name = 'Tilak';

update users set team_id = 2 where name = 'Raj';

select users.name, users.salary, teams.name as team
from users
join teams on users.team_id = teams.id;

select users.name, users.salary, teams.name as team
from users
left join teams on users.team_id = teams.id;

select users.name, users.salary
from users
union
select name, price from gadgets;

select users.name, salary from users where team_id in (1, 2);

select users.name from users where team_id is null;

select users.name, teams.name from users full outer join teams on users.team_id = teams.id;

select users.name, users.salary from users cross join teams;

-- Using LIMIT and OFFSET

select * from users limit 2 offset 1;

select * from users order by age asc limit 5;

select name, salary from users order by salary desc limit 3;

select * from users where age > 27 limit 4;

select * from users where salary between 60000 and 80000 limit 2;

select * from users order by name desc limit 3;

select * from gadgets order by price limit 3;

select * from gadgets order by price desc limit 3;

select * from teams limit 2;

select * from users where name like 'A%' limit 2;








-- Using the wildcard character to select all columns
SELECT * FROM employees;

-- SELECT Using Column Aliases
SELECT first_name AS fname, last_name AS lname FROM employees;

-- Select Individual Columns
SELECT first_name, last_name FROM employees;

-- Selecting specified number of records
SELECT * FROM employees LIMIT 5;

-- Selecting with Condition
SELECT * FROM employees WHERE department = 'IT';

-- Selecting with CASE
SELECT first_name, last_name, salary, 
       CASE 
           WHEN salary > 50000 THEN 'High'
           WHEN salary BETWEEN 30000 AND 50000 THEN 'Medium'
           ELSE 'Low'
       END AS salary_category
FROM employees;

-- Select columns which are named after reserved keyword
SELECT `order`, `desc`, `rank` FROM orders_table;

-- Selecting with table alias
SELECT e.first_name, e.last_name FROM employees e;

-- Selecting with more than 1 condition
SELECT * FROM employees WHERE department = 'IT' AND salary > 40000;

-- Selecting without Locking the table
SELECT * FROM employees WITH (NOLOCK);

-- Selecting with Aggregate function
SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department;

-- Select with condition of multiple values from column
SELECT * FROM employees WHERE department IN ('IT', 'HR', 'Finance');

-- Get aggregated result for row groups
SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department;

-- Selection with sorted Results
SELECT * FROM employees ORDER BY salary DESC;

-- Selecting with null
SELECT * FROM employees WHERE manager_id IS NULL;

-- Select distinct (unique values only)
SELECT DISTINCT department FROM employees;

-- Select rows from multiple tables
SELECT e.first_name, e.last_name, d.department_name 
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

-- GROUP BY Examples
-- Basic GROUP BY example
SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department;

-- Filter GROUP BY results using a HAVING clause
SELECT department, COUNT(*) AS emp_count FROM employees GROUP BY department HAVING emp_count > 5;

-- USE GROUP BY to COUNT the number of rows for each unique entry in a given column
SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department;

-- ORDER BY Examples
-- Sorting by column number (instead of name)
SELECT first_name, last_name, salary FROM employees ORDER BY 3 DESC;

-- Use ORDER BY with LIMIT to return the top x rows based on a column's value
SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC LIMIT 5;

-- Customized sorting order
SELECT first_name, last_name, department FROM employees 
ORDER BY FIELD(department, 'HR', 'IT', 'Finance');

-- Order by Alias
SELECT first_name, last_name, salary AS monthly_salary FROM employees ORDER BY monthly_salary DESC;

-- Sorting by multiple columns
SELECT first_name, last_name, department, salary FROM employees ORDER BY department ASC, salary DESC;

-- AND & OR Operators
-- AND OR Example
SELECT * FROM employees WHERE department = 'IT' AND (salary > 50000 OR experience > 5);

-- CASE Examples
-- Use CASE to COUNT the number of rows in a column matching a condition
SELECT department, COUNT(CASE WHEN salary > 50000 THEN 1 END) AS high_earners FROM employees GROUP BY department;

-- Searched CASE in SELECT (Matches a boolean expression)
SELECT first_name, last_name, salary, 
       CASE WHEN salary > 50000 THEN 'High Salary' ELSE 'Low Salary' END AS salary_status
FROM employees;

-- CASE in a clause ORDER BY
SELECT first_name, last_name, salary FROM employees ORDER BY CASE WHEN salary > 50000 THEN 1 ELSE 2 END;

-- Shorthand CASE in SELECT
SELECT first_name, last_name, 
       CASE department WHEN 'IT' THEN 'Tech' WHEN 'HR' THEN 'People' ELSE 'Other' END AS dept_alias
FROM employees;

-- Using CASE in UPDATE
UPDATE employees SET salary = 
    CASE WHEN department = 'IT' THEN salary * 1.1 ELSE salary * 1.05 END;

-- CASE use for NULL values ordered last
SELECT * FROM employees ORDER BY CASE WHEN manager_id IS NULL THEN 1 ELSE 0 END, manager_id;

-- CASE in ORDER BY clause to sort records by lowest value of 2 columns
SELECT * FROM employees ORDER BY LEAST(salary, bonus);




-- LIKE operator
-- Match open-ended pattern
SELECT * FROM employees WHERE name LIKE 'J%';

-- Single character match
SELECT * FROM employees WHERE name LIKE '_a%';

-- ESCAPE statement in the LIKE-query
SELECT * FROM products WHERE code LIKE '100\_%' ESCAPE '\';

-- Search for a range of characters
SELECT * FROM customers WHERE name LIKE '[A-F]%';

-- Match by range or set
SELECT * FROM products WHERE name LIKE '[CD]%';

-- Wildcard characters
SELECT * FROM employees WHERE name LIKE '%son';

-- IN clause
-- Simple IN clause
SELECT * FROM employees WHERE department IN ('HR', 'Finance', 'IT');

-- Using IN clause with a subquery
SELECT * FROM employees WHERE department_id IN (SELECT id FROM departments WHERE location = 'New York');

-- Filter results using WHERE and HAVING
-- Use BETWEEN to Filter Results
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31';

-- Use HAVING with Aggregate Functions
SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 10;

-- WHERE clause with NULL/NOT NULL values
SELECT * FROM employees WHERE manager_id IS NULL;
SELECT * FROM employees WHERE manager_id IS NOT NULL;

-- Equality
SELECT * FROM employees WHERE salary = 50000;

-- The WHERE clause only returns rows that match its criteria
SELECT * FROM employees WHERE age > 30;

-- AND and OR
SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;
SELECT * FROM employees WHERE department = 'IT' OR department = 'Finance';

-- Use IN to return rows with a value contained in a list
SELECT * FROM products WHERE category_id IN (1, 3, 5, 7);

-- Use LIKE to find matching strings and substrings
SELECT * FROM customers WHERE email LIKE '%@gmail.com';

-- Where EXISTS
SELECT * FROM employees WHERE EXISTS (SELECT 1 FROM departments WHERE employees.department_id = departments.id AND departments.name = 'HR');

-- Use HAVING to check for multiple conditions in a group
SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000 AND COUNT(*) > 5;






